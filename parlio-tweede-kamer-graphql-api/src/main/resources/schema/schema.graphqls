type Query {
    echo(msg: String!): String!
    people(after: String, before: String, first: Int, last: Int): PersonConnection!
    rawPerson(rawId: String!): Person # TODO Remove
}

"""
Date in yyyy-MM-dd (2015-01-21) format
"""
scalar Date

"""
Supplied by [`graphql-dgs-pagination`](https://netflix.github.io/dgs/advanced/relay-pagination/)
"""
directive @connection on OBJECT

interface Node {
    id: ID!
}

enum ChangeEntryKey {
    PERSON_SLUG
    PERSON_FIRST_NAME
    PERSON_FAMILY_NAME
    PERSON_INITIALS
    PERSON_DATE_OF_BIRTH
}

interface ChangeEntry {
    key: ChangeEntryKey!
}

type StringChangeEntry implements ChangeEntry {
    key: ChangeEntryKey!
    oldValue: String
    newValue: String
}

interface ChangeEvent implements Node {
    id: ID!
    """
    Operation identifier for this event type.
    I.e: test.my_test1, super_cool.ingest_event, person.change.name
    The identifier MUST match the following regular expression:
    ^[A-Za-z0-9](?:[A-Za-z0-9]|[A-Za-z0-9_][A-Za-z0-9])*(?:\.[A-Za-z0-9](?:[A-Za-z0-9]|[A-Za-z0-9_][A-Za-z0-9])*)* (DOLLAR SIGN)
    """
    op: String!
    log: [ChangeEntry!]!
}

type Person implements Node @connection {
    id: ID!
    slug: String!
    firstName: String!
    familyName: String!
    nameInitials: String!
    changeHistory: [PersonChangeEvent!]!
    gifts(after: String, before: String, first: Int, last: Int): PersonGiftConnection!
}

interface PersonChangeEvent implements ChangeEvent & Node {
    id: ID!
    person: Person!
    op: String!
    log: [ChangeEntry!]!
}

type PersonSyncFeedUpdateEvent implements PersonChangeEvent & ChangeEvent & Node {
    id: ID!
    person: Person!
    op: String!
    log: [ChangeEntry!]!
}

type PoliticalParty implements Node @connection {
    id: ID!
}

type PersonGift implements Node @connection {
    id: ID!
    description: String
    date: Date
}

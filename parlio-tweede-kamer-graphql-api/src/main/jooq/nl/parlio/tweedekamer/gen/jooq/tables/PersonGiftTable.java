/*
 * This file is generated by jOOQ.
 */
package nl.parlio.tweedekamer.gen.jooq.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nl.parlio.tweedekamer.gen.jooq.PublicTable;
import nl.parlio.tweedekamer.gen.jooq.tables.records.QPersonGiftRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>public.person_gift</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PersonGiftTable extends TableImpl<QPersonGiftRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.person_gift</code>
     */
    public static final PersonGiftTable PERSON_GIFT = new PersonGiftTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QPersonGiftRecord> getRecordType() {
        return QPersonGiftRecord.class;
    }

    /**
     * The column <code>public.person_gift.person_gift_id</code>.
     */
    public final TableField<QPersonGiftRecord, Long> PERSON_GIFT_ID = createField(DSL.name("person_gift_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.person_gift.person_id</code>.
     */
    public final TableField<QPersonGiftRecord, Long> PERSON_ID = createField(DSL.name("person_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.person_gift.odata_id</code>.
     */
    public final TableField<QPersonGiftRecord, UUID> ODATA_ID = createField(DSL.name("odata_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.person_gift.description</code>.
     */
    public final TableField<QPersonGiftRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.person_gift.date</code>.
     */
    public final TableField<QPersonGiftRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE, this, "");

    private PersonGiftTable(Name alias, Table<QPersonGiftRecord> aliased) {
        this(alias, aliased, null);
    }

    private PersonGiftTable(Name alias, Table<QPersonGiftRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.person_gift</code> table reference
     */
    public PersonGiftTable(String alias) {
        this(DSL.name(alias), PERSON_GIFT);
    }

    /**
     * Create an aliased <code>public.person_gift</code> table reference
     */
    public PersonGiftTable(Name alias) {
        this(alias, PERSON_GIFT);
    }

    /**
     * Create a <code>public.person_gift</code> table reference
     */
    public PersonGiftTable() {
        this(DSL.name("person_gift"), null);
    }

    @Override
    public Schema getSchema() {
        return PublicTable.PUBLIC;
    }

    @Override
    public Identity<QPersonGiftRecord, Long> getIdentity() {
        return (Identity<QPersonGiftRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<QPersonGiftRecord> getPrimaryKey() {
        return Internal.createUniqueKey(PersonGiftTable.PERSON_GIFT, DSL.name("person_gift_pkey"), new TableField[] { PersonGiftTable.PERSON_GIFT.PERSON_GIFT_ID }, true);
    }

    @Override
    public List<UniqueKey<QPersonGiftRecord>> getKeys() {
        return Arrays.<UniqueKey<QPersonGiftRecord>>asList(
              Internal.createUniqueKey(PersonGiftTable.PERSON_GIFT, DSL.name("person_gift_pkey"), new TableField[] { PersonGiftTable.PERSON_GIFT.PERSON_GIFT_ID }, true)
        );
    }

    @Override
    public PersonGiftTable as(String alias) {
        return new PersonGiftTable(DSL.name(alias), this);
    }

    @Override
    public PersonGiftTable as(Name alias) {
        return new PersonGiftTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PersonGiftTable rename(String name) {
        return new PersonGiftTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PersonGiftTable rename(Name name) {
        return new PersonGiftTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, UUID, String, LocalDate> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}

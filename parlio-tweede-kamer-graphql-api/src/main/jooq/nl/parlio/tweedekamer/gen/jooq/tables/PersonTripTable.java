/*
 * This file is generated by jOOQ.
 */
package nl.parlio.tweedekamer.gen.jooq.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import nl.parlio.tweedekamer.gen.jooq.PublicTable;
import nl.parlio.tweedekamer.gen.jooq.tables.records.QPersonTripRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>public.person_trip</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PersonTripTable extends TableImpl<QPersonTripRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.person_trip</code>
     */
    public static final PersonTripTable PERSON_TRIP = new PersonTripTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QPersonTripRecord> getRecordType() {
        return QPersonTripRecord.class;
    }

    /**
     * The column <code>public.person_trip.person_trip_id</code>.
     */
    public final TableField<QPersonTripRecord, Long> PERSON_TRIP_ID = createField(DSL.name("person_trip_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.person_trip.person_id</code>.
     */
    public final TableField<QPersonTripRecord, Long> PERSON_ID = createField(DSL.name("person_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.person_trip.odata_id</code>.
     */
    public final TableField<QPersonTripRecord, UUID> ODATA_ID = createField(DSL.name("odata_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.person_trip.purpose</code>.
     */
    public final TableField<QPersonTripRecord, String> PURPOSE = createField(DSL.name("purpose"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.person_trip.destination</code>.
     */
    public final TableField<QPersonTripRecord, String> DESTINATION = createField(DSL.name("destination"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.person_trip.paid_by</code>.
     */
    public final TableField<QPersonTripRecord, String> PAID_BY = createField(DSL.name("paid_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.person_trip.start_date</code>.
     */
    public final TableField<QPersonTripRecord, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.person_trip.end_date</code>.
     */
    public final TableField<QPersonTripRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE, this, "");

    private PersonTripTable(Name alias, Table<QPersonTripRecord> aliased) {
        this(alias, aliased, null);
    }

    private PersonTripTable(Name alias, Table<QPersonTripRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.person_trip</code> table reference
     */
    public PersonTripTable(String alias) {
        this(DSL.name(alias), PERSON_TRIP);
    }

    /**
     * Create an aliased <code>public.person_trip</code> table reference
     */
    public PersonTripTable(Name alias) {
        this(alias, PERSON_TRIP);
    }

    /**
     * Create a <code>public.person_trip</code> table reference
     */
    public PersonTripTable() {
        this(DSL.name("person_trip"), null);
    }

    @Override
    public Schema getSchema() {
        return PublicTable.PUBLIC;
    }

    @Override
    public Identity<QPersonTripRecord, Long> getIdentity() {
        return (Identity<QPersonTripRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<QPersonTripRecord> getPrimaryKey() {
        return Internal.createUniqueKey(PersonTripTable.PERSON_TRIP, DSL.name("person_trip_pkey"), new TableField[] { PersonTripTable.PERSON_TRIP.PERSON_TRIP_ID }, true);
    }

    @Override
    public List<UniqueKey<QPersonTripRecord>> getKeys() {
        return Arrays.<UniqueKey<QPersonTripRecord>>asList(
              Internal.createUniqueKey(PersonTripTable.PERSON_TRIP, DSL.name("person_trip_pkey"), new TableField[] { PersonTripTable.PERSON_TRIP.PERSON_TRIP_ID }, true)
        );
    }

    @Override
    public PersonTripTable as(String alias) {
        return new PersonTripTable(DSL.name(alias), this);
    }

    @Override
    public PersonTripTable as(Name alias) {
        return new PersonTripTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PersonTripTable rename(String name) {
        return new PersonTripTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PersonTripTable rename(Name name) {
        return new PersonTripTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, UUID, String, String, String, LocalDate, LocalDate> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}

/*
 * This file is generated by jOOQ.
 */
package nl.parlio.tweedekamer.gen.jooq.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import nl.parlio.tweedekamer.gen.jooq.PublicTable;
import nl.parlio.tweedekamer.gen.jooq.tables.records.QChangeEventRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>public.change_event</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChangeEventTable extends TableImpl<QChangeEventRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.change_event</code>
     */
    public static final ChangeEventTable CHANGE_EVENT = new ChangeEventTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QChangeEventRecord> getRecordType() {
        return QChangeEventRecord.class;
    }

    /**
     * The column <code>public.change_event.change_event_id</code>.
     */
    public final TableField<QChangeEventRecord, Long> CHANGE_EVENT_ID = createField(DSL.name("change_event_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.change_event.operation_name</code>.
     */
    public final TableField<QChangeEventRecord, String> OPERATION_NAME = createField(DSL.name("operation_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.change_event.time</code>.
     */
    public final TableField<QChangeEventRecord, OffsetDateTime> TIME = createField(DSL.name("time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.change_event.model</code>.
     */
    public final TableField<QChangeEventRecord, String> MODEL = createField(DSL.name("model"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.change_event.ref</code>.
     */
    public final TableField<QChangeEventRecord, Long> REF = createField(DSL.name("ref"), SQLDataType.BIGINT.nullable(false), this, "");

    private ChangeEventTable(Name alias, Table<QChangeEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private ChangeEventTable(Name alias, Table<QChangeEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.change_event</code> table reference
     */
    public ChangeEventTable(String alias) {
        this(DSL.name(alias), CHANGE_EVENT);
    }

    /**
     * Create an aliased <code>public.change_event</code> table reference
     */
    public ChangeEventTable(Name alias) {
        this(alias, CHANGE_EVENT);
    }

    /**
     * Create a <code>public.change_event</code> table reference
     */
    public ChangeEventTable() {
        this(DSL.name("change_event"), null);
    }

    @Override
    public Schema getSchema() {
        return PublicTable.PUBLIC;
    }

    @Override
    public Identity<QChangeEventRecord, Long> getIdentity() {
        return (Identity<QChangeEventRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<QChangeEventRecord> getPrimaryKey() {
        return Internal.createUniqueKey(ChangeEventTable.CHANGE_EVENT, DSL.name("change_event_pkey"), new TableField[] { ChangeEventTable.CHANGE_EVENT.CHANGE_EVENT_ID }, true);
    }

    @Override
    public List<UniqueKey<QChangeEventRecord>> getKeys() {
        return Arrays.<UniqueKey<QChangeEventRecord>>asList(
              Internal.createUniqueKey(ChangeEventTable.CHANGE_EVENT, DSL.name("change_event_pkey"), new TableField[] { ChangeEventTable.CHANGE_EVENT.CHANGE_EVENT_ID }, true)
        );
    }

    @Override
    public ChangeEventTable as(String alias) {
        return new ChangeEventTable(DSL.name(alias), this);
    }

    @Override
    public ChangeEventTable as(Name alias) {
        return new ChangeEventTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ChangeEventTable rename(String name) {
        return new ChangeEventTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChangeEventTable rename(Name name) {
        return new ChangeEventTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, OffsetDateTime, String, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}

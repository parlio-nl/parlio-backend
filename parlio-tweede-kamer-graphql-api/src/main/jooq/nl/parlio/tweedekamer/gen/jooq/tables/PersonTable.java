/*
 * This file is generated by jOOQ.
 */
package nl.parlio.tweedekamer.gen.jooq.tables;


import java.util.Arrays;
import java.util.List;

import nl.parlio.tweedekamer.gen.jooq.PublicTable;
import nl.parlio.tweedekamer.gen.jooq.tables.records.QPersonRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>public.person</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PersonTable extends TableImpl<QPersonRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.person</code>
     */
    public static final PersonTable PERSON = new PersonTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QPersonRecord> getRecordType() {
        return QPersonRecord.class;
    }

    /**
     * The column <code>public.person.person_id</code>.
     */
    public final TableField<QPersonRecord, Long> PERSON_ID = createField(DSL.name("person_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.person.slug</code>.
     */
    public final TableField<QPersonRecord, String> SLUG = createField(DSL.name("slug"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.person.first_name</code>.
     */
    public final TableField<QPersonRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.person.family_name</code>.
     */
    public final TableField<QPersonRecord, String> FAMILY_NAME = createField(DSL.name("family_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.person.name_initials</code>.
     */
    public final TableField<QPersonRecord, String> NAME_INITIALS = createField(DSL.name("name_initials"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.person.date_of_birth</code>.
     */
    public final TableField<QPersonRecord, String> DATE_OF_BIRTH = createField(DSL.name("date_of_birth"), SQLDataType.CLOB.nullable(false), this, "");

    private PersonTable(Name alias, Table<QPersonRecord> aliased) {
        this(alias, aliased, null);
    }

    private PersonTable(Name alias, Table<QPersonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.person</code> table reference
     */
    public PersonTable(String alias) {
        this(DSL.name(alias), PERSON);
    }

    /**
     * Create an aliased <code>public.person</code> table reference
     */
    public PersonTable(Name alias) {
        this(alias, PERSON);
    }

    /**
     * Create a <code>public.person</code> table reference
     */
    public PersonTable() {
        this(DSL.name("person"), null);
    }

    @Override
    public Schema getSchema() {
        return PublicTable.PUBLIC;
    }

    @Override
    public Identity<QPersonRecord, Long> getIdentity() {
        return (Identity<QPersonRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<QPersonRecord> getPrimaryKey() {
        return Internal.createUniqueKey(PersonTable.PERSON, DSL.name("person_pkey"), new TableField[] { PersonTable.PERSON.PERSON_ID }, true);
    }

    @Override
    public List<UniqueKey<QPersonRecord>> getKeys() {
        return Arrays.<UniqueKey<QPersonRecord>>asList(
              Internal.createUniqueKey(PersonTable.PERSON, DSL.name("person_pkey"), new TableField[] { PersonTable.PERSON.PERSON_ID }, true)
            , Internal.createUniqueKey(PersonTable.PERSON, DSL.name("person_slug_key"), new TableField[] { PersonTable.PERSON.SLUG }, true)
        );
    }

    @Override
    public PersonTable as(String alias) {
        return new PersonTable(DSL.name(alias), this);
    }

    @Override
    public PersonTable as(Name alias) {
        return new PersonTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PersonTable rename(String name) {
        return new PersonTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PersonTable rename(Name name) {
        return new PersonTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
